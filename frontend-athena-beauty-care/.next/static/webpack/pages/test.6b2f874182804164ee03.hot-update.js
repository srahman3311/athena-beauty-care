"use strict";
self["webpackHotUpdate_N_E"]("pages/test",{

/***/ "./lib/find-time-slots-copy/findTimeSlots.js":
/*!***************************************************!*\
  !*** ./lib/find-time-slots-copy/findTimeSlots.js ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "findTimeSlots": function() { return /* binding */ findTimeSlots; }
/* harmony export */ });
/* harmony import */ var D_programming_fiverr_projects_nextjs_projects_athena_beauty_care_frontend_athena_beauty_care_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var D_programming_fiverr_projects_nextjs_projects_athena_beauty_care_frontend_athena_beauty_care_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var D_programming_fiverr_projects_nextjs_projects_athena_beauty_care_frontend_athena_beauty_care_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(D_programming_fiverr_projects_nextjs_projects_athena_beauty_care_frontend_athena_beauty_care_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _fetchStylistsEvents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fetchStylistsEvents */ "./lib/find-time-slots-copy/fetchStylistsEvents.js");
/* harmony import */ var _findBusyTimes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./findBusyTimes */ "./lib/find-time-slots-copy/findBusyTimes.js");
/* harmony import */ var _getDateTime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDateTime */ "./lib/find-time-slots-copy/getDateTime.js");
/* harmony import */ var _getEventDetails__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getEventDetails */ "./lib/find-time-slots-copy/getEventDetails.js");
/* harmony import */ var _getStylists__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./getStylists */ "./lib/find-time-slots-copy/getStylists.js");
/* module decorator */ module = __webpack_require__.hmd(module);


// Modules needed to fetch events






var findTimeSlots = /*#__PURE__*/function () {
  var _ref = (0,D_programming_fiverr_projects_nextjs_projects_athena_beauty_care_frontend_athena_beauty_care_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/D_programming_fiverr_projects_nextjs_projects_athena_beauty_care_frontend_athena_beauty_care_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2() {
    var newTreatments, stylistsByName, location, dateTimeArray, allStylists, calendarEvents, filteredDateTimeArray, stylistsWithFreeTimes, abcd, availableStartingTimesWithDates;
    return D_programming_fiverr_projects_nextjs_projects_athena_beauty_care_frontend_athena_beauty_care_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            newTreatments = [{
              category: "Brows",
              choosenStylist: "Nicole Gorgeous",
              location: "Athena Beauty Care - Gulshan",
              treatmentDuration: 35,
              treatmentPrice: 23,
              treatmentTitle: "Shaping brows"
            }, {
              category: "Plasma Ion",
              choosenStylist: "Andrea Gorgeous",
              location: "Athena Beauty Care - Gulshan",
              treatmentDuration: 70,
              treatmentPrice: 42,
              treatmentTitle: "Plasma Ion with light facials"
            }, {
              category: "Permanent Makeup",
              choosenStylist: "Soudi Gorgeous",
              location: "Athena Beauty Care - Gulshan",
              treatmentDuration: 85,
              treatmentPrice: 45,
              treatmentTitle: "Permanent Makeup with light massage"
            }];
            stylistsByName = [];
            newTreatments.forEach(function (treatment) {
              stylistsByName.push(treatment.choosenStylist);
            });
            location = newTreatments[0].location;
            _context2.next = 6;
            return (0,_getDateTime__WEBPACK_IMPORTED_MODULE_5__.getDateTime)();

          case 6:
            dateTimeArray = _context2.sent;
            _context2.next = 9;
            return (0,_getStylists__WEBPACK_IMPORTED_MODULE_7__.getStylists)(newTreatments);

          case 9:
            allStylists = _context2.sent;
            _context2.next = 12;
            return (0,_fetchStylistsEvents__WEBPACK_IMPORTED_MODULE_3__.fetchStylistsEvents)();

          case 12:
            calendarEvents = _context2.sent;
            console.log(dateTimeArray);
            console.log(allStylists);
            console.log(calendarEvents); // calendarEvents.forEach(calendarEvent => {
            //     console.log(new Date(calendarEvent.startTime), new Date(calendarEvent.endTime));
            // });
            // Steps
            // 1. dateTimeArray contains the dates of 30 days from today. 
            // Find all the dates based on dayName (example - Monday) when all choosen stylists are available at the choosen location
            // and push it to the filteredDateTimeArray 

            filteredDateTimeArray = []; // For each date of the dateTimeArray loop through the each stylist's workSchdule to find day match.

            dateTimeArray.forEach(function (dateTime) {
              var date = new Date(dateTime.date); // get the day name (example - Monday) from the date to check against each stylist's workSchedule's day Name

              var dayName = date.toLocaleDateString("en-US", {
                weekday: "long"
              }); // Initialize the count variable with the initial value 0

              var count = 0; // Loot through all stylists to be able to loop through their workSchedule 

              allStylists.forEach(function (stylist) {
                // Loop through the each stylist's workSchedule and see if they are all available on dayName
                stylist.workSchedule.forEach(function (schedule) {
                  if (schedule.location === location && schedule.day === dayName) {
                    count += 1;
                  }
                });
              }); // If all stylists are available on this date based on dayName then add that date to filteredDateTimeArray

              if (count === newTreatments.length) filteredDateTimeArray.push(dateTime);
            });
            return _context2.abrupt("return", console.log(filteredDateTimeArray));

          case 28:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function findTimeSlots() {
    return _ref.apply(this, arguments);
  };
}();

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,